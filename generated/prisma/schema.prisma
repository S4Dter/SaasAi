generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                               String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                                            String                  @unique
  name                                                             String
  role                                                             String
  avatar                                                           String?
  company                                                          String?
  bio                                                              String?
  createdAt                                                        DateTime?               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                        DateTime?               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agent_conversions                                                agent_conversions[]
  agent_recommendations_agent_recommendations_creator_idTousers    agent_recommendations[] @relation("agent_recommendations_creator_idTousers")
  agent_recommendations_agent_recommendations_enterprise_idTousers agent_recommendations[] @relation("agent_recommendations_enterprise_idTousers")
  agent_revenue                                                    agent_revenue[]
  agent_views                                                      agent_views[]
  agents                                                           Agent[]                 @relation("CreatedAgents")
  community_post_likes                                             community_post_likes[]
  community_posts                                                  community_posts[]
  contacts_contacts_creator_idTousers                              contacts[]              @relation("contacts_creator_idTousers")
  contacts_contacts_enterprise_idTousers                           contacts[]              @relation("contacts_enterprise_idTousers")
  enterprises                                                      enterprises?
  favorites                                                        favorites[]
  purchased_agents                                                 purchased_agents[]

  @@index([company(ops: raw("gin_trgm_ops"))], map: "idx_users_company_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_users_name_trgm", type: Gin)
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model Agent {
  id                    String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String
  slug                  String                  @unique
  description           String?
  short_description     String?
  category              String?
  creatorId             String                  @map("creator_id") @db.Uuid
  pricing               Json
  featured              Boolean?                @default(false)
  logo_url              String?
  integrations          String[]
  demo_url              String?
  demo_video_url        String?
  screenshots           String[]
  createdAt             DateTime?               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agent_conversions     agent_conversions[]
  agent_recommendations agent_recommendations[]
  agent_revenue         agent_revenue[]
  agent_views           agent_views[]
  creator               User                    @relation("CreatedAgents", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  contacts              contacts[]
  favorites             favorites[]
  purchased_agents      purchased_agents[]

  @@index([category], map: "idx_agents_category")
  @@index([creatorId], map: "idx_agents_creator_id")
  @@index([description(ops: raw("gin_trgm_ops"))], map: "idx_agents_description_trgm", type: Gin)
  @@index([featured], map: "idx_agents_featured")
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_agents_name_trgm", type: Gin)
  @@map("agents")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_conversions {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id   String    @db.Uuid
  creator_id String    @db.Uuid
  count      Int?      @default(0)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  agents     Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_recommendations {
  id                                               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id                                         String    @db.Uuid
  enterprise_id                                    String    @db.Uuid
  creator_id                                       String    @db.Uuid
  reason                                           String?
  match_score                                      Int?
  created_at                                       DateTime? @default(now()) @db.Timestamptz(6)
  agents                                           Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_agent_recommendations_creator_idTousers    User      @relation("agent_recommendations_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_agent_recommendations_enterprise_idTousers User      @relation("agent_recommendations_enterprise_idTousers", fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_revenue {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id   String    @db.Uuid
  creator_id String    @db.Uuid
  amount     Decimal   @db.Decimal(12, 2)
  currency   String
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  agents     Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_views {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id   String    @db.Uuid
  creator_id String    @db.Uuid
  count      Int?      @default(0)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  agents     Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model community_post_likes {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id         String          @db.Uuid
  user_id         String          @db.Uuid
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  community_posts community_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model community_posts {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                String
  content              String
  user_id              String                 @db.Uuid
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  community_post_likes community_post_likes[]
  users                User                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_community_posts_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contacts {
  id                                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id                            String                @db.Uuid
  enterprise_id                       String                @db.Uuid
  creator_id                          String                @db.Uuid
  message                             String
  status                              String
  created_at                          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime?             @default(now()) @db.Timestamptz(6)
  agents                              Agent                 @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_contacts_creator_idTousers    User                  @relation("contacts_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_contacts_enterprise_idTousers User                  @relation("contacts_enterprise_idTousers", fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  enterprise_contacts                 enterprise_contacts[]

  @@index([agent_id], map: "idx_contacts_agent_id")
  @@index([creator_id], map: "idx_contacts_creator_id")
  @@index([enterprise_id], map: "idx_contacts_enterprise_id")
}

model debug_logs {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  level      String
  message    String
  data       Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model enterprise_contacts {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contact_id   String    @db.Uuid
  company_size String?
  industry     String?
  budget       Decimal?  @db.Decimal(12, 2)
  timeline     String?
  needs        String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  contacts     contacts  @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model enterprises {
  id             String    @id @db.Uuid
  location       String?
  size           String?
  industry       String?
  annual_revenue Decimal?  @db.Decimal(15, 2)
  website        String?
  contact_phone  String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  users          User      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model favorites {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  agent_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  agents     Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, agent_id])
  @@index([agent_id], map: "idx_favorites_agent_id")
  @@index([user_id], map: "idx_favorites_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model purchased_agents {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String    @db.Uuid
  agent_id      String    @db.Uuid
  purchase_date DateTime? @default(now()) @db.Timestamptz(6)
  status        String
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  agents        Agent     @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, agent_id])
  @@index([agent_id], map: "idx_purchased_agents_agent_id")
  @@index([user_id], map: "idx_purchased_agents_user_id")
}
