}
  };

  return {
    deleteMedia,
    loading,
    error,
    success
  };
}

/**
 * Hook for searching posts
 */
export function useSearchPosts() {
  const [results, setResults] = useState<PostWithRelations[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPagination] = useState({
    count: 0,
    page: 1,
    pageSize: 10,
    totalPages: 0
  });
  const [currentQuery, setCurrentQuery] = useState('');

  const searchPosts = async (query: string, page = 1, pageSize = 10) => {
    if (!query.trim()) {
      setResults([]);
      setPagination({
        count: 0,
        page,
        pageSize,
        totalPages: 0
      });
      return;
    }
    
    setLoading(true);
    setError(null);
    setCurrentQuery(query);
    
    try {
      // Search only in published posts
      let searchQuery = supabase
        .from('posts')
        .select('*, author:author_id(id, email, full_name)')
        .eq('status', 'published')
        .or(`title.ilike.%${query}%,content.ilike.%${query}%`);
      
      // Get count
      let totalCount = 0;
      try {
        // @ts-ignore - Supabase types are not up to date
        const countResult = await searchQuery.count();
        totalCount = countResult.count || 0;
        if (countResult.error) {
          throw new Error(countResult.error.message);
        }
      } catch (err: any) {
        console.error('Error counting search results:', err);
        throw new Error('Failed to search posts count');
      }
      
      // Apply pagination
      searchQuery = searchQuery
        .order('published_at', { ascending: false })
        .range((page - 1) * pageSize, page * pageSize - 1);
      
      // Execute query
      const { data, error } = await searchQuery;
      
      if (error) {
        throw new Error(error.message);
      }
      
      if (!data || data.length === 0) {
        setResults([]);
        setPagination({
          count: 0,
          page,
          pageSize,
          totalPages: 0
        });
        setLoading(false);
        return;
      }
      
      // Fetch categories and tags for each post
      const postsWithRelations: PostWithRelations[] = await Promise.all(
        data.map(async (post) => {
          // Get categories
          const { data: postCategories } = await supabase
            .from('post_categories')
            .select('category_id')
            .eq('post_id', post.id);
          
          const categoryIds = postCategories?.map(pc => pc.category_id) || [];
          
          let categories: Category[] = [];
          if (categoryIds.length > 0) {
            const { data: categoriesData } = await supabase
              .from('categories')
              .select('*')
              .in('id', categoryIds);
            categories = categoriesData || [];
          }
          
          // Get tags
          const { data: postTags } = await supabase
            .from('post_tags')
            .select('tag_id')
            .eq('post_id', post.id);
          
          const tagIds = postTags?.map(pt => pt.tag_id) || [];
          
          let tags: Tag[] = [];
          if (tagIds.length > 0) {
            const { data: tagsData } = await supabase
              .from('tags')
              .select('*')
              .in('id', tagIds);
            tags = tagsData || [];
          }
          
          return {
            ...post,
            categories,
            tags
          };
        })
      );
      
      setResults(postsWithRelations);
      setPagination({
        count: totalCount,
        page,
        pageSize,
        totalPages: Math.ceil(totalCount / pageSize)
      });
    } catch (err: any) {
      setError(err.message);
      setResults([]);
    } finally {
      setLoading(false);
    }
  };
  
  const handlePageChange = (newPage: number) => {
    // Keep the same search query but change page
    searchPosts(currentQuery, newPage, pagination.pageSize);
  };
  
  return {
    results,
    loading,
    error,
    pagination,
    searchPosts,
    handlePageChange
  };
}
